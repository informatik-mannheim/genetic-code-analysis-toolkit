package bio.gcat.nucleic.helper;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.Map.Entry;
import java.util.Set;
import bio.gcat.nucleic.Tuple;

public class C3Code {
	public static final List<List<Tuple>> CODES;
	static {
		List<List<Tuple>> codes = new ArrayList<>(216);
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT AGC GCT ATC GAT CTC GAG GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ATC GAT CAG CTG CTC GAG GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACG CGT AGG CCT ATG CAT CAC GTG CAG CTG CCG CGG CTA TAG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT AGG CCT ATG CAT CAC GTG CAG CTG CCG CGG CTA TAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT ATG CAT CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG CTC GAG TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT ATG CAT CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT ATC GAT CAC GTG CTC GAG GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT ATC GAT CAC GTG CAG CTG CTC GAG GAC GTC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATC GAT GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATG CAT CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT ATC GAT GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT GCC GGC GGA TCC TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGA TCT AGC GCT AGG CCT GAC GTC GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACG CGT ACT AGT AGA TCT AGG CCT ATG CAT CAC GTG CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACT AGT AGA TCT AGC GCT ATC GAT CAC GTG GAC GTC GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT ATC GAT CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT AGC GCT ATC GAT CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ATC GAT CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ATC GAT CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACT AGT AGC GCT ATC GAT CAC GTG CTC GAG GAA TTC GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACT AGT ATC GAT CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT AGC GCT ATC GAT CAC GTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ATC GAT CAC GTG CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT ATC GAT CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT ATC GAT CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT ATC GAT CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT ATC GAT CAC GTG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT CAC GTG CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT ATC GAT CAC GTG CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT CAC GTG CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT ATC GAT GCC GGC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT ATG CAT CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGG CCT CAG CTG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACT AGT AGC GCT ATC GAT CTC GAG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ACT AGT AGC GCT AGG CCT CCA TGG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ACT AGT AGC GCT AGG CCT ATG CAT CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ACT AGT ATG CAT CAG CTG CCA TGG CCG CGG CTC GAG"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT CCG CGG GGA TCC TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT ATG CAT CCG CGG GGA TCC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGG CCT CAG CTG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGG CCT ATG CAT CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACT AGT AGA TCT AGC GCT AGG CCT ATC GAT GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACT AGT AGA TCT AGC GCT AGG CCT GAC GTC GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATC GAT CCA TGG GCC GGC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT CCA TGG GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ACT AGT AGA TCT CCG CGG CGA TCG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT AGA TCT CCG CGG CGA TCG CTA TAG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT AGG CCT CCA TGG CGA TCG GCA TGC GCC GGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT CAG CTG CCA TGG CCG CGG CGA TCG GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT AGG CCT CCA TGG CGA TCG GCA TGC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT CCA TGG GAC GTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT CCA TGG GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ACT AGT CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT CCA TGG CCG CGG CGA TCG GAA TTC GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT CCA TGG CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT CCA TGG CCG CGG CGA TCG CTA TAG GAA TTC GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT CCA TGG CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT CCA TGG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT ACT AGT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTC GAG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACT AGT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACT AGT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTC GAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG GAC GTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG CTC GAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAC GTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACT AGT AGA TCT AGG CCT CAA TTG CCA TGG CCG CGG CGA TCG GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACT AGT AGA TCT CAA TTG CCA TGG CCG CGG CGA TCG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACT AGT AGA TCT CAA TTG CCA TGG CGA TCG GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACT AGT AGA TCT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT AGG CCT CAA TTG CCA TGG CCG CGG CGA TCG CTA TAG GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT CAA TTG CCA TGG CCG CGG CGA TCG CTA TAG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT CAA TTG CCA TGG CGA TCG GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT AGG CCT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT CAA TTG CAC GTG GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACG CGT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAA TTC"));
		codes.add(Tuple.splitTuples("AAT ATT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAA TTC GAC GTC"));
		codes.add(Tuple.splitTuples("AAT ATT AGC GCT ATC GAT CAA TTG CAC GTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAT ATT ATC GAT CAA TTG CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("ACT AGT CAA TTG CCA TGG CCG CGG CGA TCG GAA TTC GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACT AGT CAA TTG CCA TGG CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC TAA TTA"));
		codes.add(Tuple.splitTuples("ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG GAA TTC GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("ATC GAT CAA TTG CAC GTG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("ATC GAT CAA TTG CAC GTG CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT ATC GAT GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGC GCT AGG CCT ATG CAT CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGC GCT ATC GAT CTC GAG GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT AGG CCT ATG CAT CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACG CGT ACT AGT ATG CAT CAG CTG CCG CGG CTC GAG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACT AGT AGC GCT AGG CCT ATC GAT GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACT AGT ATC GAT CAG CTG CTC GAG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACG CGT ACT AGT AGC GCT AGG CCT ATG CAT CAC GTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACG CGT ACT AGT ATG CAT CAC GTG CAG CTG CCG CGG CTC GAG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACT AGT AGC GCT AGG CCT ATC GAT CAC GTG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACT AGT AGC GCT ATC GAT CAC GTG CTC GAG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACT AGT AGG CCT ATG CAT CAC GTG CAG CTG CCG CGG GAC GTC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACT AGT ATC GAT CAC GTG CAG CTG CTC GAG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACT AGT ATG CAT CAC GTG CAG CTG CCG CGG CTC GAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGA TCT AGC GCT GAC GTC GCC GGC GGA TCC TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT AGA TCT AGC GCT ATC GAT GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT AGA TCT GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGC GCT ATC GAT GAA TTC GAC GTC GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT AGC GCT ATC GAT GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT ATC GAT GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT ACC GGT GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ACT AGT AGG CCT CAG CTG CCA TGG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT AGG CCT ATG CAT CAG CTG CCA TGG CCG CGG CTA TAG"));
		codes.add(Tuple.splitTuples("AAG CTT ACA TGT AGG CCT CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACT AGT AGA TCT AGC GCT ATC GAT GAC GTC GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACT AGT AGA TCT AGC GCT GAC GTC GCC GGC GGA TCC TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGG CCT CAG CTG CCA TGG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGG CCT ATG CAT CAG CTG CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ACT AGT AGA TCT GAC GTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT AGA TCT GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT AGG CCT CAG CTG CCA TGG CCG CGG CGA TCG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT AGG CCT CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACT AGT AGC GCT ATC GAT GAA TTC GAC GTC GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ACT AGT GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ATC GAT GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT ACT AGT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG"));
		codes.add(Tuple.splitTuples("AAG CTT AGG CCT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA"));
		codes.add(Tuple.splitTuples("AAT ATT ACG CGT ACT AGT AGA TCT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("ACT AGT AGA TCT AGG CCT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT AGG CCT ATG CAT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA"));
		codes.add(Tuple.splitTuples("CAA TTG CCA TGG CCG CGG CGA TCG CTA TAG GAA TTC GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG GAA TTC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CCA TGG CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG GAA TTC GAC GTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CCA TGG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CCA TGG CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG GAA TTC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CGA TCG GAA TTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAA TTC GAC GTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CAG CTG GAA TTC GAC GTC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACC GGT ACT AGT AGC GCT ATC GAT CTC GAG GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACG CGT ACT AGT AGG CCT ATG CAT CAC GTG CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ACG CGT ATG CAT CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ATG CAT CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT AGC GCT ATC GAT CAC GTG CTC GAG GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAG CTT AAT ATT ATC GAT CAC GTG CAG CTG CTC GAG GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGA TCT AGC GCT AGG CCT ATC GAT GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGA TCT AGC GCT ATC GAT GAC GTC GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATG CAT CAC GTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT AGA TCT AGC GCT ATC GAT CAC GTG GAC GTC GCC GGC GGA TCC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ACC GGT ACT AGT AGC GCT ATC GAT CTC GAG GAA TTC GAC GTC GCC GGC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT AGC GCT ATC GAT CAC GTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT AAT ATT ATC GAT CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC"));
		codes.add(Tuple.splitTuples("AAC GTT CAC GTG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAC GTT ATC GAT CAC GTG CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAC GTT ATC GAT CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGC GCT ATC GAT CTC GAG GCC GGC"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGG CCT ATG CAT CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ACT AGT AGG CCT ATG CAT CAG CTG CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACA TGT ACG CGT ATG CAT CAG CTG CCA TGG CCG CGG CTA TAG CTC GAG"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATC GAT GCC GGC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT GCC GGC TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATG CAT CCG CGG"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT ATC GAT GCC GGC GGA TCC"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACC GGT ACG CGT ACT AGT AGA TCT AGC GCT GCC GGC GGA TCC TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT CCA TGG CCG CGG TCA TGA"));
		codes.add(Tuple.splitTuples("AAT ATT ACA TGT ACG CGT ACT AGT AGA TCT AGC GCT AGG CCT ATG CAT CCA TGG CCG CGG"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ACT AGT AGA TCT CGA TCG GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT AGA TCT CGA TCG GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT AGG CCT CCA TGG CCG CGG CGA TCG GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT CCA TGG CCG CGG CGA TCG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACT AGT AGA TCT CCA TGG CGA TCG GCA TGC GCC GGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT AGG CCT CCA TGG CCG CGG CGA TCG CTA TAG GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT CCA TGG CCG CGG CGA TCG CTA TAG GCA TGC GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT AGA TCT CCA TGG CGA TCG GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT ACC GGT ATC GAT CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("ACA TGT CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC GCA TGC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ACA TGT CCA TGG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT ACT AGT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ACG CGT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG"));
		codes.add(Tuple.splitTuples("AAG CTT AAT ATT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAC GTC"));
		codes.add(Tuple.splitTuples("AAG CTT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AAG CTT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG CTC GAG TAA TTA"));
		codes.add(Tuple.splitTuples("AAG CTT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("AGA TCT AGG CCT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG GGA TCC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("AGA TCT AGG CCT ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG TAA TTA"));
		codes.add(Tuple.splitTuples("AGA TCT CAA TTG CAC GTG CGA TCG GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("CAA TTG CAG CTG CCA TGG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CGA TCG CTA TAG CTC GAG GAA TTC TAA TTA"));
		codes.add(Tuple.splitTuples("ATG CAT CAA TTG CAC GTG CAG CTG CCG CGG CTA TAG CTC GAG GAA TTC GAC GTC TAA TTA"));
		codes.add(Tuple.splitTuples("CAA TTG CAC GTG GAA TTC GAC GTC GCA TGC GCC GGC GGA TCC GTA TAC TAA TTA TCA TGA"));
		codes.add(Tuple.splitTuples("ATC GAT CAA TTG CAC GTG CTC GAG GAA TTC GAC GTC GCA TGC GCC GGC GTA TAC TAA TTA"));
		codes.add(Tuple.splitTuples("ATC GAT CAA TTG CAC GTG CAG CTG CTC GAG GAA TTC GAC GTC GCC GGC GTA TAC TAA TTA"));
		CODES = Collections.unmodifiableList(codes);
	}

	public static final Map<Integer,Integer> CODE2CLASS;
	static {
		Map<Integer,Integer> code2class = new HashMap<>();

		code2class.put(  1,1); code2class.put(  3,2); code2class.put(  4,3); code2class.put(  7,4); code2class.put(  8,5);
		code2class.put(100,1); code2class.put(101,2); code2class.put(102,3); code2class.put( 97,4); code2class.put( 98,5);
		code2class.put( 29,1); code2class.put( 15,2); code2class.put( 16,3); code2class.put( 54,4); code2class.put( 53,5);
		code2class.put( 71,1); code2class.put( 90,2); code2class.put( 86,3); code2class.put( 51,4); code2class.put( 52,5);
		code2class.put(  2,1); code2class.put(  5,2); code2class.put(  6,3); code2class.put(  9,4); code2class.put( 10,5);
		code2class.put( 99,1); code2class.put(103,2); code2class.put(104,3); code2class.put( 95,4); code2class.put( 96,5);
		code2class.put( 79,1); code2class.put( 43,2); code2class.put( 42,3); code2class.put( 58,4); code2class.put( 55,5);
		code2class.put( 22,1); code2class.put( 62,2); code2class.put( 61,3); code2class.put( 46,4); code2class.put( 45,5);

		code2class.put( 11,6); code2class.put( 12,7); code2class.put( 13,8); code2class.put( 14,9); code2class.put( 17,10);
		code2class.put( 91,6); code2class.put( 88,7); code2class.put( 87,8); code2class.put( 92,9); code2class.put( 89,10);
		code2class.put( 21,6); code2class.put( 30,7); code2class.put( 23,8); code2class.put( 28,9); code2class.put( 20,10);
		code2class.put( 78,6); code2class.put( 72,7); code2class.put( 81,8); code2class.put( 70,9); code2class.put( 80,10);
		code2class.put( 39,6); code2class.put( 38,7); code2class.put( 37,8); code2class.put( 36,9); code2class.put( 40,10);
		code2class.put( 68,6); code2class.put( 64,7); code2class.put( 65,8); code2class.put( 66,9); code2class.put( 69,10);
		code2class.put( 74,6); code2class.put( 84,7); code2class.put( 77,8); code2class.put( 82,9); code2class.put( 75,10);
		code2class.put( 31,6); code2class.put( 27,7); code2class.put( 33,8); code2class.put( 26,9); code2class.put( 34,10);

		code2class.put( 18,11); code2class.put( 24,12); code2class.put( 25,13); code2class.put(105,14); code2class.put(107,15); 
		code2class.put( 94,11); code2class.put( 83,12); code2class.put( 85,13); code2class.put(147,14); code2class.put(148,15); 
		code2class.put( 63,11); code2class.put( 49,12); code2class.put( 50,13); code2class.put(123,14); code2class.put(120,15); 
		code2class.put( 44,11); code2class.put( 57,12); code2class.put( 56,13); code2class.put(143,14); code2class.put(146,15); 
		code2class.put( 41,11); code2class.put( 73,12); code2class.put( 76,13); code2class.put(106,14); code2class.put(112,15); 
		code2class.put( 67,11); code2class.put( 32,12); code2class.put( 35,13); code2class.put(150,14); code2class.put(156,15); 
		code2class.put( 93,11); code2class.put( 48,12); code2class.put( 47,13); code2class.put(141,14); code2class.put(127,15); 
		code2class.put( 19,11); code2class.put( 60,12); code2class.put( 59,13); code2class.put(124,14); code2class.put(139,15); 

		code2class.put(108,16); code2class.put(109,17); code2class.put(111,18); code2class.put(113,19); code2class.put(117,20);
		code2class.put(152,16); code2class.put(153,17); code2class.put(151,18); code2class.put(158,19); code2class.put(157,20);
		code2class.put(125,16); code2class.put(121,17); code2class.put(119,18); code2class.put(134,19); code2class.put(130,20);
		code2class.put(140,16); code2class.put(144,17); code2class.put(145,18); code2class.put(132,19); code2class.put(135,20);
		code2class.put(110,16); code2class.put(114,17); code2class.put(116,18); code2class.put(115,19); code2class.put(118,20);
		code2class.put(149,16); code2class.put(154,17); code2class.put(159,18); code2class.put(155,19); code2class.put(160,20);
		code2class.put(142,16); code2class.put(128,17); code2class.put(126,18); code2class.put(136,19); code2class.put(131,20);
		code2class.put(122,16); code2class.put(137,17); code2class.put(138,18); code2class.put(129,19); code2class.put(133,20);

		code2class.put(161,21); code2class.put(163,22); code2class.put(164,23); code2class.put(167,24); code2class.put(169,25); 
		code2class.put(211,21); code2class.put(215,22); code2class.put(216,23); code2class.put(208,24); code2class.put(210,25); 
		code2class.put(168,21); code2class.put(190,22); code2class.put(189,23); code2class.put(171,24); code2class.put(198,25); 
		code2class.put(207,21); code2class.put(188,22); code2class.put(187,23); code2class.put(204,24); code2class.put(180,25); 
		code2class.put(162,21); code2class.put(165,22); code2class.put(166,23); code2class.put(178,24); code2class.put(177,25); 
		code2class.put(214,21); code2class.put(212,22); code2class.put(213,23); code2class.put(200,24); code2class.put(199,25); 
		code2class.put(179,21); code2class.put(194,22); code2class.put(191,23); code2class.put(201,24); code2class.put(209,25); 
		code2class.put(197,21); code2class.put(185,22); code2class.put(186,23); code2class.put(174,24); code2class.put(170,25); 

		code2class.put(172,26); code2class.put(173,27);
		code2class.put(205,26); code2class.put(206,27);
		code2class.put(181,26); code2class.put(183,27);
		code2class.put(195,26); code2class.put(192,27);
		code2class.put(202,26); code2class.put(203,27);
		code2class.put(175,26); code2class.put(176,27);
		code2class.put(184,26); code2class.put(182,27);
		code2class.put(196,26); code2class.put(193,27);

		CODE2CLASS = code2class;
	}

	public static final Map<Integer,Set<Integer>> CLASS2CODES;
	static {
		Map<Integer,Set<Integer>> class2codes = new HashMap<Integer,Set<Integer>>();

		for(Entry<Integer,Integer> codeAndClass:CODE2CLASS.entrySet())
			class2codes.computeIfAbsent(codeAndClass.getValue(),code->new TreeSet<>()).add(codeAndClass.getKey());

		CLASS2CODES = class2codes;
	}
}
